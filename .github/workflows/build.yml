name: Build Endstone Territory

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号（例如 1.2.3，会自动加上 v 前缀）'
        required: true
      publish_release:
        description: '是否发布 Release（true/false）'
        required: true
        default: 'false'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]
        lang: [english]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ===== Linux =====
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg lsb-release software-properties-common unzip zip libfmt-dev
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 16
          sudo apt-get install -y libc++-16-dev libc++abi-16-dev cmake libsqlite3-dev

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER=clang-16 \
                -DCMAKE_CXX_COMPILER=clang++-16 \
                -DCMAKE_CXX_FLAGS="-stdlib=libc++"

      # ===== Windows =====
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg.exe install sqlite3:x64-windows-static

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake" `
          -DVCPKG_TARGET_TRIPLET=x64-windows-static

      # ===== Build =====
      - name: Build
        run: cmake --build build --config Release

      # ===== Package per language =====
      - name: Package plugin
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $VERSION = "${{ github.event.inputs.version }}"
          $OS = "${{ matrix.os }}"
          $LANG = "${{ matrix.lang }}"
          
          # 直接在当前目录创建最终的打包目录
          $BUILD_DIR = "territory" 
          New-Item -Path $BUILD_DIR -ItemType Directory -Force
          
          $PLUGIN = Get-ChildItem -Recurse -Path build -Filter '*.dll' | Select-Object -First 1 | ForEach-Object { $_.FullName }
          $EXT = "dll"
          
          # 将文件直接复制到最终的打包目录
          Copy-Item -Path "$PLUGIN" -Destination "${BUILD_DIR}/territory.${EXT}"
          Copy-Item -Path "language/${LANG}/lang.json" -Destination "${BUILD_DIR}/lang.json"
          
          $ZIP_NAME = "territory_v${VERSION}_${OS}_${LANG}.zip"
          # 【直接压缩最终的打包目录，并将压缩包放在当前工作目录
          Compress-Archive -Path $BUILD_DIR -DestinationPath $ZIP_NAME
          Remove-Item -Path $BUILD_DIR -Recurse -Force

      - name: Package plugin (Linux)
        if: runner.os == 'Linux'
        run: |
          VERSION=${{ github.event.inputs.version }}
          OS=${{ matrix.os }}
          LANG=${{ matrix.lang }}
          
          # 直接在当前目录创建最终的打包目录
          BUILD_DIR=territory
          mkdir -p $BUILD_DIR
          
          PLUGIN=$(find build -name "*.so" | head -n 1)
          EXT=so
          
          # 将文件直接复制到最终的打包目录
          cp "$PLUGIN" ${BUILD_DIR}/territory.${EXT}
          cp "language/${LANG}/lang.json" ${BUILD_DIR}/lang.json
          
          ZIP_NAME=territory_v${VERSION}_${OS}_${LANG}.zip
          # 直接压缩最终的打包目录，并将压缩包放在当前工作目录
          zip -r ${ZIP_NAME} ${BUILD_DIR}
          rm -rf ${BUILD_DIR}


      # ===== Upload artifact per language =====
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: territory-${{ matrix.os }}-${{ matrix.lang }}
          path: territory_v${{ github.event.inputs.version }}_${{ matrix.os }}_${{ matrix.lang }}.zip

  release:
    name: Publish Release
    needs: build
    if: ${{ github.event.inputs.publish_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: territory-*        # 匹配所有平台+语言的 artifact
          merge-multiple: false       # 关键：不要合并到一个目录
          path: artifacts             # 每个 artifact 会在 artifacts/territory-OS-LANG/ 下

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Endstone Territory v${{ github.event.inputs.version }}
          draft: false
          prerelease: false
          files: artifacts/**/*.zip   # 递归匹配所有 zip
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

