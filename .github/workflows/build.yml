name: Build Endstone Territory

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号（例如 1.2.3，会自动加上 v 前缀）'
        required: true
      publish_release:
        description: '是否发布 Release（true/false）'
        required: true
        default: 'false'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]
        # 只保留 os 维度

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ===== Linux =====
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg lsb-release software-properties-common unzip zip
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 16
          sudo apt-get install -y libc++-16-dev libc++abi-16-dev cmake libsqlite3-dev
      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER=clang-16 \
                -DCMAKE_CXX_COMPILER=clang++-16 \
                -DCMAKE_CXX_FLAGS="-stdlib=libc++"
      # ===== Windows =====
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg.exe install sqlite3:x64-windows-static
      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake" `
          -DVCPKG_TARGET_TRIPLET=x64-windows-static

      # ===== Build =====
      - name: Build
        run: cmake --build build --config Release

      # ===== Prepare plugin artifact (Linux) =====
      - name: Prepare plugin artifact (Linux)
        if: runner.os == 'Linux'
        run: |
          SO_FILE=$(find build -name "*.so" | head -n 1)
          if [ -z "$SO_FILE" ]; then
            echo "No .so file found!"
            exit 1
          fi
          cp "$SO_FILE" build/territory.so

      # ===== Upload plugin artifact =====
      - name: Upload plugin artifact (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: territory-linux-plugin
          path: build/territory.so

      - name: Upload plugin artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: territory-windows-plugin
          path: |
            ${{ github.workspace }}\build\Release\*.dll

  release:
    name: Publish Release
    needs: build
    if: ${{ github.event.inputs.publish_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all plugin artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: territory-*-plugin
          merge-multiple: false
          path: artifacts

      - name: Prepare and Package All
        run: |
          VERSION=${{ github.event.inputs.version }}
          LANGS=(chinese english)
          OS_LIST=(linux windows)
          for OS in "${OS_LIST[@]}"; do
            if [[ "$OS" == "linux" ]]; then
              PLUGIN_PATH=$(find artifacts/territory-linux-plugin -name "*.so" | head -n 1)
              EXT=so
            else
              PLUGIN_PATH=$(find artifacts/territory-windows-plugin -name "*.dll" | head -n 1)
              EXT=dll
            fi
            for LANG in "${LANGS[@]}"; do
              BUILD_DIR=package
              mkdir -p ${BUILD_DIR}/territory
              cp "$PLUGIN_PATH" ${BUILD_DIR}/territory.${EXT}
              cp "language/${LANG}/lang.json" ${BUILD_DIR}/territory/lang.json
              ZIP_NAME=territory_v${VERSION}_${OS}_${LANG}.zip
              cd ${BUILD_DIR}
              zip -r ../${ZIP_NAME} territory.${EXT} territory
              cd ..
              mv ${ZIP_NAME} artifacts/
              rm -rf ${BUILD_DIR}
            done
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Endstone Territory v${{ github.event.inputs.version }}
          draft: false
          prerelease: false
          files: artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          name: territory-windows-${{ matrix.lang }}
          path: territory_v${{ github.event.inputs.version }}_${{ matrix.os }}_${{ matrix.lang }}.zip
